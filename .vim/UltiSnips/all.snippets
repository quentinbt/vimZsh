snippet ngcontroller
{
  angular.module('app.${1:nom-du-dossier}').controller('${2:MonController}', $2)

    $2.$inject = []

    function $2() {
      let ${3:anagramme-controller} = this 
      $3.$onInit = () => {
      }
    }
}
endsnippet

snippet console
console.log('$1', $2)
endsnippet

snippet ngroute
{
  angular.module('app.${1:nom-du-dossier}').config(${2:MaFonctionRoute})

  $2.$inject = ['$stateProvider']

  function $2($stateProvider) {
    $stateProvider.state('$1', {
      url: '/$1',
      views: {
        main: {
          templateUrl: '$1/$1.html',
          controller: '${3:MonController}',
          controllerAs: '${4:anagramme-controller}',
        },
      },
    })
  }
}
endsnippet

snippet ngmodule
{
  angular.module('app.${1:nom-du-dossier}', [])
}
endsnippet

snippet ngcomponent
{
    angular.module('app.core')
        .component('${1:nomDuComponent}', {
            bindings: {
                data: '<',
            },
            controller: ${2:MonController},
            controllerAs: '${3:anagramme-controller}',
            templateUrl: 'components/${4:path-to-file}/$4.html'
        })

    $2.$inject = []
    function $2() {
        let $3 = this

        $3.$onInit = () => {}
    }
}
endsnippet


snippet ngtest
{
import { async} from '@angular/core/testing'
import { RouterTestingModule } from '@angular/router/testing';
import { Server } from 'ng-test-runner'

import { authMockStart } from '../../helpers.spec'

import { ${1:NomDuModule}Module } from '../${2:chemin-module}.module'
import { ${3:NomDuComposant}Component } from './${4:chemin-composant}.component'

import test, { App, expectThat, navigateToUrl } from 'ng-test-runner'

describe('App component', () => {
  let server: Server
  let app: App

  beforeEach(
    async(() => {
      app = test($1Module,  RouterTestingModule.withRoutes([]))
      server = authMockStart(server)
    })
  )

  afterEach(() => {
    server.stop()
  })

  it(
    'renders the component $3Component',
    async(() => {
      const comp = app.run($3Component)

      comp.verify(expectThat.textOf('p').isEqualTo('$4 works!'))
    })
  )

  it(
    'naviguate properly to $3Component',
    async(() => {
      const comp = app.run($3Component)

      comp.perform(navigateToUrl('/$4'))

      comp.verify(expectThat.location.isEqualTo('/$4'))
    })
  )
})
}
endsnippet
